generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String   @db.MediumText
  password  String   @db.MediumText
  image     String?  @db.LongText
  role      UserRole @default(VIEWER)
  notes     Note[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")
  archived  Boolean  @default(false)

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model Book {
  id           Int       @id @default(autoincrement())
  name         String    @db.MediumText
  slug         String    @unique
  abbreviation String
  chapters     Chapter[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt() @map("updated_at")
  archived     Boolean   @default(false)

  @@map("books")
}

model Chapter {
  id        Int      @id @default(autoincrement())
  name      String   @db.MediumText
  number    Int
  slug      String   @unique
  bookId    Int      @map("book_id")
  book      Book     @relation(fields: [bookId], references: [id])
  verses    Verse[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")
  archived  Boolean  @default(false)

  @@map("chapters")
}

model Verse {
  id           Int          @id @default(autoincrement())
  name         String       @db.MediumText
  number       Int
  text         String
  audio        String?
  type         VerseType    @default(CONTENT)
  chapterId    Int          @map("chapter_id")
  chapter      Chapter      @relation(fields: [chapterId], references: [id])
  commentaries Commentary[]
  notes        Note[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt() @map("updated_at")
  archived     Boolean      @default(false)

  @@map("verses")
}

enum VerseType {
  HEADING
  CONTENT
}

model Note {
  id        Int      @id @default(autoincrement())
  text      String
  verseId   Int      @map("verse_id")
  verse     Verse    @relation(fields: [verseId], references: [id])
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")
  archived  Boolean  @default(false)

  @@map("notes")
}

model Commentary {
  id        Int      @id @default(autoincrement())
  name      String
  text      String
  verseId   Int      @map("verse_id")
  verse     Verse    @relation(fields: [verseId], references: [id])
  authorId  Int      @map("author_id")
  author    Author   @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt() @map("updated_at")
  archived  Boolean  @default(false)

  @@map("commentaries")
}

model Author {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  image        String?      @db.LongText
  commentaries Commentary[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt() @map("updated_at")
  archived     Boolean      @default(false)
}
