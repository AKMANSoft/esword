generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String      @db.MediumText
  password   String      @db.MediumText
  image      String?     @db.LongText
  role       UserRole    @default(VIEWER)
  notes      Note[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt() @map("updated_at")
  archived   Boolean     @default(false)
  archivedAt DateTime?   @map("archived_at")
  bookmarks  Bookmark[]
  activities Activity[]
  highlights Highlight[]
  Blog       Blog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model Book {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  slug         String    @unique
  abbreviation String    @db.MediumText
  chapters     Chapter[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt() @map("updated_at")
  archived     Boolean   @default(false)
  archivedAt   DateTime? @map("archived_at")

  @@map("books")
}

model Chapter {
  id             Int       @id @default(autoincrement())
  name           Int
  commentaryName String?   @map("commentary_name")
  commentaryText String?   @map("commentary_text")
  slug           String    @unique
  bookId         Int       @map("book_id")
  book           Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  topics         Topic[]
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt() @map("updated_at")
  archived       Boolean   @default(false)
  archivedAt     DateTime? @map("archived_at")

  @@map("chapters")
}

model Topic {
  id         Int       @id @default(autoincrement())
  name       String
  number     Int
  chapterId  Int       @map("chapter_id")
  chapter    Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  verses     Verse[]
  archived   Boolean   @default(false)
  archivedAt DateTime? @map("archived_at")

  @@map("topics")
}

model Verse {
  id           Int          @id @default(autoincrement())
  number       Int
  text         String       @db.Text
  audio        String?
  topicId      Int          @map("topic_id")
  topic        Topic        @relation(fields: [topicId], references: [id], onDelete: Cascade)
  commentaries Commentary[]
  notes        Note[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt() @map("updated_at")
  archived     Boolean      @default(false)
  archivedAt   DateTime?    @map("archived_at")
  bookmarks    Bookmark[]
  highlights   Highlight[]

  // @@fulltext([text])
  @@map("verses")
}

model Highlight {
  id      Int    @id @default(autoincrement())
  text    String @db.Text
  index   Int
  verseId Int    @map("verse_id")
  verse   Verse  @relation(fields: [verseId], references: [id], onDelete: Cascade)
  userId  Int    @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id         Int       @id @default(autoincrement())
  text       String    @db.LongText
  verseId    Int       @map("verse_id")
  verse      Verse     @relation(fields: [verseId], references: [id], onDelete: Cascade)
  userId     Int       @map("user_id")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt() @map("updated_at")
  archived   Boolean   @default(false)
  archivedAt DateTime? @map("archived_at")

  @@map("notes")
}

model Commentary {
  id         Int       @id @default(autoincrement())
  name       String    @db.MediumText
  text       String    @db.LongText
  verseId    Int       @map("verse_id")
  verse      Verse     @relation(fields: [verseId], references: [id], onDelete: Cascade)
  authorId   Int       @map("author_id")
  author     Author    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt() @map("updated_at")
  archived   Boolean   @default(false)
  archivedAt DateTime? @map("archived_at")

  @@map("commentaries")
}

model Author {
  id           Int          @id @default(autoincrement())
  name         String       @db.MediumText
  description  String?      @db.LongText
  image        String?      @db.LongText
  commentaries Commentary[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt() @map("updated_at")
  archived     Boolean      @default(false)
  archivedAt   DateTime?    @map("archived_at")

  @@map("authors")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  verseId   Int      @map("verse_id")
  verse     Verse    @relation(fields: [verseId], references: [id])
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
}

model Activity {
  id          Int                @id @default(autoincrement())
  action      ActivityActionType
  model       ActivityModelType
  description String             @db.Text
  ref         Int?
  userId      Int                @map("user_id")
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp   DateTime           @default(now())

  @@map("activities")
}

enum ActivityActionType {
  UPDATE
  CREATE
  DELETE
  RESTORE
  ARCHIVE
}

enum ActivityModelType {
  AUTHORS
  BOOKMARKS
  COMMENTARIES
  BOOKS
  CHAPTERS
  TOPICS
  VERSES
  NOTES
  USERS
}

model Settings {
  id           Int    @id @default(autoincrement())
  aboutTitle   String @map("about_title")
  aboutContent String @map("about_content")
}

model Blog {
  id         Int        @id @default(autoincrement())
  slug       String     @unique
  title      String
  content    String     @db.LongText
  type       BlogType
  status     BlogStatus @default(DRAFT)
  userId     Int        @map("user_id")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  archived   Boolean    @default(false)
  archivedAt DateTime?  @map("archived_at")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt() @map("updated_at")
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum BlogType {
  PROBLEM
  MANUSCRIPT
}
